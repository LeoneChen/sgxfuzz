#ifndef AFL_LOADER_SGX_TYPES_H
#define AFL_LOADER_SGX_TYPES_H

typedef uint32_t sdk_version_t;

struct TCS_t {
    uint64_t reserved0;
    uint64_t flags;
    uint64_t ossa;
    uint32_t cssa;
    uint32_t nssa;
    uint64_t oentry;
    uint64_t reserved1; // AEP
    uint64_t ofs_base;
    uint64_t ogs_base;
    uint32_t ofs_limit;
    uint32_t ogs_limit;
    uint8_t reserved[4024];
};

struct exit_info_t {
    uint32_t vector: 8;
    uint32_t exit_type: 3;
    uint32_t reserved: 20;
    uint32_t valid: 1;
};

struct ssa_gpr_t {
    uint64_t rax;
    uint64_t rcx;
    uint64_t rdx;
    uint64_t rbx;
    uint64_t rsp;
    uint64_t rbp;
    uint64_t rsi;
    uint64_t rdi;
    uint64_t r8;
    uint64_t r9;
    uint64_t r10;
    uint64_t r11;
    uint64_t r12;
    uint64_t r13;
    uint64_t r14;
    uint64_t r15;
    uint64_t rflags;
    uint64_t rip;
    uint64_t rsp_u;
    uint64_t rbp_u;
    struct exit_info_t exit_info;
    uint32_t reserved;
    uint64_t fs;
    uint64_t gs;
};

typedef unsigned long sys_word_t;

struct thread_data_t {
    sys_word_t self_addr;
    sys_word_t last_sp;
    sys_word_t stack_base_addr;
    sys_word_t stack_limit_addr;
    ssa_gpr_t* first_ssa_gpr;
    sys_word_t stack_guard;
    sys_word_t flags;
    sys_word_t xsave_size;
    sys_word_t last_error;
    thread_data_t* m_next;
    sys_word_t tls_addr;
    sys_word_t tls_array;
    intptr_t exception_flag;
    sys_word_t cxx_thread_info[6];
    sys_word_t stack_commit_addr;
};


typedef struct system_features_t {
    uint64_t cpu_features;
    sdk_version_t version;
    uint64_t system_feature_set[1];
    uint32_t cpuinfo_table[8][4];
    uint8_t* sealed_key;
    uint64_t size;
    uint64_t cpu_features_ext;
    uint32_t cpu_core_num;
} system_features_t;


union system_features_nuc {
    unsigned char _buf[176] =
        { 0xff, 0x7f, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00,
          0x04, 0x00, 0x00, 0x00, // sdk_version (0=1.5, 1=2.0, 2=2.1, 3=2.2, 4=2.3)
          0x01, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0xc0, 0x18, 0x00, 0x00, 0x00, 0x47, 0x65, 0x6e, 0x75, 0x6e, 0x74, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0xa1, 0x06, 0x07, 0x00, 0x00, 0x08, 0x40, 0x04, 0xbf, 0xeb, 0xf8, 0x4f,
          0xff, 0xfb, 0xeb, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x01, 0x00, 0x7c, 0x3f, 0x00, 0x40, 0x01, 0x3f, 0x00, 0x00, 0x00,
          0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//          0x87, 0xe2, 0x94, 0x22, // CPUID 7.B
          0x87, 0xe2, 0x94, 0x02, // CPUID 7.B disable SHA EXT
          0x04, 0x00, 0x40, 0x40, // CPUID 7.C
          0x00, 0x04, 0x00, 0xac, // CPUID 7.D
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x7f, 0x02, 0x22, 0x08, 0x00, 0x24, 0x00, 0x04, 0x00, 0x00, 0x00 };
    system_features_t system_features;
};

#endif //AFL_LOADER_SGX_TYPES_H
